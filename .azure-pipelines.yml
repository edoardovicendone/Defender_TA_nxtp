# Author: Michael Bischof <michael@nextpart.io>
# Organisation: Nextpart Security Intelligence GmbH
name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
- group: docker
- name: APP_DIR
  value: $(Pipeline.Workspace)/s/apps
- name: PKG_DIR
  value: $(Build.ArtifactStagingDirectory)/package
- name: feed
  value: 'bdf79b24-157f-463f-960f-825f04ff0f9c/b992132d-b93a-4ad6-a5e2-cca3afd731a2'
- name: appname-feed
  value: 'app-nextpart-defender'
- name: major
  value: 0
- name: minor
  value: 0

trigger:
  branches:
    include:
    - master
    - topic-pipeline

pool: Default

stages:

- stage:
  displayName: Build_Master_Version_Number
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  jobs:
  - job: Build_Master_Version_Number
    variables:
      patch: $[counter(variables['minor'], 0)]
    steps:
      - bash: |
          echo "##vso[build.updatebuildnumber]$(major).$(minor).$(patch)"
        name: SetMasterBuildName
# Versioning feature branch and PR builds

- stage:
  displayName: Build_Branch_Version_Number
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
  jobs:
  - job: Build_Branch_Version_Number
    variables:
      prpatch: $[counter(variables['system.pullrequest.pullrequestid'], 0)]
      brpatch: $[counter(variables['build.sourcebranchname'], 0)]
    steps:
      - bash: |
          echo "##vso[build.updatebuildnumber]$(major).$(minor).$(prpatch)-PullRequest"
        condition: eq(variables['Build.Reason'], 'PullRequest')
        name: SetPRBuildName
      - bash: |
          echo "##vso[build.updatebuildnumber]$(major).$(minor).$(brpatch)-$(Build.SourceBranchName)"
        condition: ne(variables['Build.Reason'], 'PullRequest')
        name: SetBranchBuildName

- stage: Build
  condition: always()
  displayName: Build_Steps
  jobs:

  - job: Packing
    pool: Default
    container:
      image: $(azureContainerRegistry)/splunk/package:latest
      endpoint: nextpartdev
    steps:
      - script: |
          sudo mkdir -p $(readlink -f "$(PKG_DIR)")
          sudo mkdir -p $(PKG_DIR)
          sudo mkdir -p $(PKG_DIR)/$(Build.Repository.Name)
          sudo chown -R $(whoami). $(PKG_DIR)
        displayName: 'Create dir'
        workingDirectory: $(Build.SourcesDirectory)
      - checkout: self
        fetchDepth: 1
        path: s/apps/$(Build.Repository.Name)
      - script: |
          package
        displayName: 'Run AppInspect & packaging'
      - script: |
          ls
          pwd
          ls $(Build.Repository.Name)
        displayName: 'Where am I'
        workingDirectory: $(PKG_DIR)
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/*_appinspect.xml'
          testRunTitle: 'Test results for package $(Build.Repository.Name).'
          searchFolder: $(PKG_DIR)
      - task: UniversalPackages@0
        inputs:
          command: 'publish'
          publishDirectory: $(PKG_DIR)/$(Build.Repository.Name)
          feedsToUsePublish: 'internal'
          vstsFeedPublish: $(feed)
          vstsFeedPackagePublish: $(appname-feed)
          versionOption: 'custom'
          versionPublish: $(Build.BuildNumber)
        displayName: 'Publish to Feed Artifacts'
      # - task: PublishPipelineArtifact@1
      #   inputs:
      #     targetPath: $(PKG_DIR)
      #     artifactName: $(Build.Repository.Name)
      #   displayName: 'Publish to Pipeline Artifacts'
